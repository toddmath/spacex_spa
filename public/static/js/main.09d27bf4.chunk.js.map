{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","table","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","links","mission_patch_small","article_link","video_link","style","width","src","alt","href","referrerPolicy","rel","target","url","controls","client","ApolloClient","uri","App","logo","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09d27bf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nconst LaunchItem = ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\n}) => {\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success,\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className='col-md-3'>\n          <Link\n            to={`/launch/${flight_number}`}\n            className={classNames(\n              {\n                'btn-outline-success': launch_success,\n                'btn-outline-danger': !launch_success,\n              },\n              'btn',\n              'btn-lg'\n            )}\n          >\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from 'react'\n\nconst MissionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p><span className=\"px-3 mr-2 bg-success\"/> = Success</p>\n      <p><span className=\"px-3 mr-2 bg-danger\"/> = Fail</p>\n    </div>\n  )\n}\n\nexport default MissionKey\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from \"./MissionKey\"\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nclass Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className='display-4 my-3'>Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            console.table(data);\n\n            return (\n              <Fragment>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport ReactPlayer from 'react-player';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n      links {\n        mission_patch_small\n        article_link\n        video_link\n      }\n    }\n  }\n`;\n\nclass Launch extends Component {\n  render() {\n    /**\n     * * Grab the flight_number from the url prop assigned by react-router,\n     * * and assign it using let, so we can use parseInt() to mutate it to an integer\n     * */\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type },\n              links: { mission_patch_small, article_link, video_link },\n            } = data.launch;\n\n            return (\n              <div>\n                <div className='container-fluid'>\n                  <div className='row media'>\n                    <div className='col-10'>\n                      <h1 className='display-4 m4-3'>\n                        <span className='text-dark'>Mission: </span>\n                        {mission_name}\n                      </h1>\n                    </div>\n\n                    <div className='col'>\n                      <img\n                        className='img-fluid img-thumbnail rounded'\n                        style={{ width: 125 }}\n                        src={mission_patch_small}\n                        alt='Mission Patch'\n                      />\n                    </div>\n                  </div>\n                </div>\n                <h4 className='mb-3'>Launch Details</h4>\n                <ul className='list-group'>\n                  <li className='list-group-item'>Flight Number: {flight_number}</li>\n                  <li className='list-group-item'>Launch Year: : {launch_year}</li>\n                  <li className='list-group-item'>\n                    Launch Success:{' '}\n                    <span\n                      className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success,\n                      })}\n                    >\n                      {launch_success ? 'Yes' : 'No'}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className='my-3'>Rocket Details</h4>\n                <ul className='list-group'>\n                  <li className='list-group-item'>Rocket ID: {rocket_id}</li>\n                  <li className='list-group-item'>Rocket Name: {rocket_name}</li>\n                  <li className='list-group-item'>Rocket Type: {rocket_type}</li>\n                  <li className='list-group-item'>\n                    <a\n                      href={article_link}\n                      referrerPolicy='no-referrer'\n                      rel='noreferrer noopener'\n                      target='_blank'\n                      className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success,\n                      })}\n                    >\n                      Article Link\n                    </a>\n                  </li>\n                </ul>\n                <div className='media'>\n                  <div className='mx-auto pt-4 w-100'>\n                    <h4 className='text-center'>Launch Video</h4>\n                    <ReactPlayer\n                      className='embed-responsive-item mw-100 mh-100 mx-auto'\n                      url={video_link}\n                      controls\n                    />\n                  </div>\n                </div>\n                <hr />\n                <Link\n                  to='/'\n                  className={classNames(\n                    {\n                      'btn-outline-success': launch_success,\n                      'btn-outline-danger': !launch_success,\n                    },\n                    'btn',\n                    'btn-lg',\n                    'mb-3'\n                  )}\n                >\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='container'>\n          <img src={logo} alt='SpaceX' style={{ width: 300, display: 'block', margin: 'auto' }} />\n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}